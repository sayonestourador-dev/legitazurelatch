-- Carregar Rayfield (com pcall para evitar crash se a lib falhar)
local ok, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)

if not ok or not Rayfield then
    warn("Rayfield não pôde ser carregado.")
    return
end

-- Criar Janela
local Window = Rayfield:CreateWindow({
   Name = "Legit Hub",
   Icon = 0,
   LoadingTitle = "best Azure Latch LEGIT",
   LoadingSubtitle = "by 2# SA biggest player",
   ShowText = "Rayfield",
   Theme = "Default",
   ToggleUIKeybind = "K",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = true,
      Invite = "ftSrGjpxJZ", -- Rayfield espera só o código do invite (sem discord.gg/)
      RememberJoins = true
   },

   KeySystem = false
})

-- Serviços
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
if not player then
    warn("LocalPlayer não encontrado.")
    return
end

-- Tenta esperar por ByteNetReliable, se não existir, avisa e encerra (evita nil errors)
local ByteNetReliable = ReplicatedStorage:WaitForChild("ByteNetReliable", 5)
if not ByteNetReliable then
    StarterGui:SetCore("SendNotification", {Title = "Erro", Text = "ByteNetReliable não encontrado em ReplicatedStorage.", Duration = 5})
    return
end

-- garante buffer
buffer = buffer or { fromstring = function(str) return str end }

-- ===================== MAGNET SCRIPT =====================
local Tab1 = Window:CreateTab("Magnet Script", "rewind")

local character = player.Character or player.CharacterAdded:Wait()
local running = false
local magnetRange = 18.01

player.CharacterAdded:Connect(function(newChar)
    character = newChar
end)

local function startSending()
    if running then return end
    running = true

    task.spawn(function()
        while running do
            if character and character:FindFirstChild("HumanoidRootPart") then
                local okRoot, playerPos = pcall(function()
                    return character.HumanoidRootPart.Position
                end)

                if okRoot and playerPos then
                    for _, part in pairs(Workspace:GetDescendants()) do
                        if part:IsA("BasePart") and part.CollisionGroup == "ball" then
                            local distance = (playerPos - part.Position).Magnitude
                            if distance <= magnetRange then
                                -- proteção p/ evitar erros se ByteNetReliable for nil por algum motivo
                                if ByteNetReliable and ByteNetReliable.FireServer then
                                    ByteNetReliable:FireServer(buffer.fromstring("\20"))
                                end
                            end
                        end
                    end
                end
            end
            task.wait(0.1)
        end
    end)
end

local function stopSending()
    running = false
end

Tab1:CreateToggle({
    Name = "Ativar Magnet",
    CurrentValue = false,
    Callback = function(Value)
        if Value then startSending() else stopSending() end
    end,
})

Tab1:CreateSlider({
    Name = "Alcance do Magnet",
    Range = {5, 50},
    Increment = 0.5,
    Suffix = "studs",
    CurrentValue = magnetRange,
    Callback = function(Value)
        magnetRange = Value
    end,
})

-- ===================== AUTO COUNTER SCRIPT =====================
local Tab2 = Window:CreateTab("Auto Counter", "swords")

Tab2:CreateLabel("Set The Auto-Counter Number To Your Character's Counter Move!")

_G.suppressNotifs = false
_G.autoSkills = {
    ["toggleDetection"] = "dribble",
    ["toggleCounter1"] = "skill1",
    ["toggleCounter2"] = "skill2",
    ["toggleCounter3"] = "skill3",
    ["toggleCounter4"] = "skill4",
    ["toggleCounter5"] = "skill5"
}

_G.SelectedCounter = "skill1"
_G.AutoCounterEnabled = false
local cooldowns = {}
local ANIMATION_ID = "rbxassetid://109744655458082"

-- Dropdown para selecionar counter
Tab2:CreateDropdown({
    Name = "Selecionar Counter",
    Options = {"skill1","skill2","skill3","skill4","skill5"},
    CurrentOption = {"skill1"},
    Callback = function(Option)
        _G.SelectedCounter = Option[1]
    end,
})

-- Toggle Auto Counter
Tab2:CreateToggle({
    Name = "Ativar Auto Counter",
    CurrentValue = false,
    Callback = function(Value)
        _G.AutoCounterEnabled = Value
    end,
})

-- Função de notificação (segura)
local function notify(title, text, duration)
    if not _G.suppressNotifs then
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = duration or 2
        })
    end
end

-- Loop principal
RunService.Stepped:Connect(function()
    if not _G.AutoCounterEnabled then return end

    local char = player.Character
    local root = char and char:FindFirstChild("HumanoidRootPart")
    if not root then return end

    for _, target in ipairs(Players:GetPlayers()) do
        if target ~= player and target.Team ~= player.Team then
            local targetChar = target.Character
            if targetChar then
                local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
                local humanoid = targetChar:FindFirstChild("Humanoid")
                local animator = humanoid and humanoid:FindFirstChildOfClass("Animator")

                if targetHRP and animator then
                    local distance = (root.Position - targetHRP.Position).Magnitude
                    if distance <= 35 then
                        local now = tick()
                        local last = cooldowns[target] or 0
                        if now - last >= 0.5 then
                            for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                if track.Animation and track.Animation.AnimationId == ANIMATION_ID then
                                    cooldowns[target] = now
                                    local skillName = _G.SelectedCounter
                                    if skillName then
                                        local args
                                        if skillName == "dribble" then
                                            args = { buffer.fromstring("\021\001"), { { skillName, false } } }
                                        else
                                            args = { buffer.fromstring("\021\001"), { { skillName } } }
                                        end
                                        if ByteNetReliable and ByteNetReliable.FireServer then
                                            ByteNetReliable:FireServer(unpack(args))
                                        end
                                    end
                                    break
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end)
