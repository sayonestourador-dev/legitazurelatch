-- Carregar Rayfield (com pcall para evitar crash se a lib falhar)
local ok, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)

if not ok or not Rayfield then
    warn("Rayfield could not be loaded.")
    return
end

-- Criar Janela
local Window = Rayfield:CreateWindow({
    Name = "Legit Hub",
    Icon = 0,
    LoadingTitle = "best Azure Latch LEGIT",
    LoadingSubtitle = "by 2# SA biggest player",
    ShowText = "Rayfield",
    Theme = "Default",
    ToggleUIKeybind = "K",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub"
    },

    Discord = {
        Enabled = true,
        -- SUBSTITUA "YOUR_INVITE_CODE" PELO CÓDIGO DO SEU CONVITE DO DISCORD!
        -- EXAMPLE: se o link for discord.gg/abcde, o código é "abcde"
        Invite = "ftSrGjpxJZ", 
        RememberJoins = true
    },

    KeySystem = false
})
-- Serviços
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")
local Camera = Workspace.CurrentCamera

local player = Players.LocalPlayer
if not player then
    warn("LocalPlayer not found.")
    return
end

-- ByteNetReliable seguro
local ByteNetReliable = ReplicatedStorage:WaitForChild("ByteNetReliable", 5)
if not ByteNetReliable then
    StarterGui:SetCore("SendNotification", {
        Title = "Error",
        Text = "ByteNetReliable not found in ReplicatedStorage.",
        Duration = 5
    })
    return
end

-- Garante buffer
buffer = buffer or { fromstring = function(str) return str end }

-- Variáveis globais
local character = player.Character or player.CharacterAdded:Wait()
player.CharacterAdded:Connect(function(newChar) character = newChar end)

-- ===================== BALLS FEATURES (MAGNET) =====================
local Tab1 = Window:CreateTab("Balls Features", "rewind")

local running, magnetRange = false, 18

local function startMagnet()
    if running then return end
    running = true
    task.spawn(function()
        while running do
            local root = character and character:FindFirstChild("HumanoidRootPart")
            if root then
                local playerPos = root.Position
                for _, part in ipairs(Workspace:GetDescendants()) do
                    if part:IsA("BasePart") and part.CollisionGroup == "ball" then
                        local distance = (playerPos - part.Position).Magnitude
                        if distance <= magnetRange then
                            ByteNetReliable:FireServer(buffer.fromstring("\20"))
                        end
                    end
                end
            end
            task.wait(0.12) -- levemente mais leve que 0.1
        end
    end)
end

local function stopMagnet()
    running = false
end

Tab1:CreateToggle({
    Name = "Enable Magnet",
    CurrentValue = false,
    Callback = function(Value)
        if Value then startMagnet() else stopMagnet() end
    end,
})

Tab1:CreateSlider({
    Name = "Magnet Range",
    Range = {5, 24}, -- range máximo limitado
    Increment = 0.5,
    Suffix = " studs",
    CurrentValue = magnetRange,
    Callback = function(Value)
        magnetRange = Value
    end,
})

-- ===================== LEGIT FEATURES (AUTO COUNTER) =====================
local Tab2 = Window:CreateTab("Legit", "swords")

Tab2:CreateLabel("Set The Auto-Counter Number To Your Character's Counter Move!")

_G.SelectedCounter, _G.AutoCounterEnabled = "skill1", false
local cooldowns, ANIMATION_ID = {}, "rbxassetid://109744655458082"

Tab2:CreateDropdown({
    Name = "Select Counter",
    Options = {"skill1","skill2","skill3","skill4","skill5"},
    CurrentOption = {"skill1"},
    Callback = function(Option) _G.SelectedCounter = Option[1] end
})

Tab2:CreateToggle({
    Name = "Enable Auto Counter",
    CurrentValue = false,
    Callback = function(Value) _G.AutoCounterEnabled = Value end
})

-- ===================== AUTO FORMLESS =====================
_G.autoFormlessEnabled = false
Tab2:CreateSection("Auto Formless")

Tab2:CreateToggle({
    Name = "Enable Auto Formless",
    CurrentValue = _G.autoFormlessEnabled,
    Callback = function(Value) _G.autoFormlessEnabled = Value end
})

Tab2:CreateLabel("When enabled, press 'T' to use.")

-- ===================== EVENT LISTENERS =====================

-- Auto Counter Loop
RunService.Stepped:Connect(function()
    if not _G.AutoCounterEnabled then return end

    local root = character and character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    local now = tick()
    for _, target in ipairs(Players:GetPlayers()) do
        if target ~= player and target.Team ~= player.Team then
            local targetChar = target.Character
            local targetHRP = targetChar and targetChar:FindFirstChild("HumanoidRootPart")
            local humanoid = targetChar and targetChar:FindFirstChild("Humanoid")
            local animator = humanoid and humanoid:FindFirstChildOfClass("Animator")

            if targetHRP and animator and (root.Position - targetHRP.Position).Magnitude <= 35 then
                if now - (cooldowns[target] or 0) >= 0.5 then
                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                        if track.Animation and track.Animation.AnimationId == ANIMATION_ID then
                            cooldowns[target] = now
                            local skillName = _G.SelectedCounter
                            if skillName then
                                local args = (skillName == "dribble")
                                    and { buffer.fromstring("\021\001"), { { skillName, false } } }
                                    or  { buffer.fromstring("\021\001"), { { skillName } } }
                                ByteNetReliable:FireServer(unpack(args))
                            end
                            break
                        end
                    end
                end
            end
        end
    end
end)

-- Auto Formless Input
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not (_G.autoFormlessEnabled and not gameProcessed and input.KeyCode == Enum.KeyCode.T and UserInputService.MouseBehavior == Enum.MouseBehavior.LockCenter) then
        return
    end

    local hrp, hum = character and character:FindFirstChild("HumanoidRootPart"), character and character:FindFirstChildOfClass("Humanoid")
    if not (hrp and hum) then return end

    hum.AutoRotate = false
    hrp.CFrame *= CFrame.Angles(0, math.rad(180), 0)

    local oldType, oldSubject = Camera.CameraType, Camera.CameraSubject
    Camera.CameraType, Camera.CFrame = Enum.CameraType.Scriptable, hrp.CFrame + Vector3.new(0, 2, 0)

    task.delay(0.1, function()
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            Camera.CameraSubject, Camera.CameraType = player.Character:FindFirstChildOfClass("Humanoid"), Enum.CameraType.Custom
        else
            Camera.CameraSubject, Camera.CameraType = oldSubject, oldType
        end
        hum.AutoRotate = true
    end)

    task.wait(0.05)
    ByteNetReliable:FireServer(buffer.fromstring("\021\001"), { { "kick", 24, false, Vector3.new(0, 1.5, 0) } })
    ByteNetReliable:FireServer(buffer.fromstring("\021\001"), { { "skill1" } })
end)
